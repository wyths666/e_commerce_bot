from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from config import ADMIN_IDS
from database.models import Order
from handlers.lk_handlers import show_profile_card
from keyboards.lk_keyboards import get_profile_edit_kb, get_confirm_order_kb, get_confirm_data_kb
from states.order_states import NewOrderForm
from database.crud import get_cart_items, create_order, clear_cart, get_user_profile
from database.db_helper import get_db
from keyboards.inline_keyboards import get_delivery_kb, get_back_to_menu_kb, get_confirm_address_kb
import logging

logger = logging.getLogger(__name__)

router = Router()

@router.callback_query(F.data == "start_new_order")
async def start_new_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    db_gen = get_db()
    db = next(db_gen)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    profile = get_user_profile(db, user_id)

    if len(profile.user_name) >1 and len(profile.user_phone) >1:
        # –ï—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        text = f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        text += f"–§–ò–û: {profile.user_name}\n"
        text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.user_phone}\n"
        text += f"–ê–¥—Ä–µ—Å: {profile.user_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö."

        if callback.message.text:
            await callback.message.edit_text(text, reply_markup=get_confirm_data_kb(), parse_mode="HTML")
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=get_confirm_data_kb(), parse_mode="HTML")
    else:
        # –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        await callback.message.answer(
            "‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_profile")]
            ])
        )





@router.callback_query(F.data == "confirm_data")
async def confirm_data(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
    await callback.message.edit_text("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_delivery_kb())
    await state.set_state(NewOrderForm.delivery)


@router.callback_query(F.data == "edit_data")
async def edit_data(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    await callback.message.edit_text("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:",
                                     reply_markup=get_profile_edit_kb(callback.from_user.id))


@router.callback_query(NewOrderForm.delivery)
async def process_delivery_new(callback: CallbackQuery, state: FSMContext):
    delivery_map = {
        "delivery_courier": "–ö—É—Ä—å–µ—Ä–æ–º",
        "delivery_pickup": "–°–∞–º–æ–≤—ã–≤–æ–∑",
        "delivery_sdek": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π"
    }
    delivery_method = delivery_map.get(callback.data, "–ù–µ —É–∫–∞–∑–∞–Ω")
    await state.update_data(delivery=delivery_method)

    user_id = callback.from_user.id
    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)

    if delivery_method == "–ö—É—Ä—å–µ—Ä–æ–º":
        # –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥—Ä–µ—Å
        if len(profile.user_address) > 1:
            # –ê–¥—Ä–µ—Å –µ—Å—Ç—å ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
            await callback.message.edit_text(
                f"üè† –í–∞—à –∞–¥—Ä–µ—Å: {profile.user_address}\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?",
                reply_markup=get_confirm_address_kb()
            )
            await state.set_state(NewOrderForm.confirm_address)
        else:
            # –ê–¥—Ä–µ—Å–∞ –Ω–µ—Ç ‚Üí –ø—Ä–æ—Å–∏–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            await state.clear()
            await callback.message.edit_text(
                "‚ùå –ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω.\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.",
                reply_markup=get_profile_edit_kb(callback.from_user.id))
            #await show_profile_card(callback.message, user_id)
    else:
        # –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–¥—Ä–µ—Å–∞ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
        await confirm_order_summary(callback, state)

@router.callback_query(F.data == "use_address")
async def confirm_address(callback: CallbackQuery, state: FSMContext):
    await confirm_order_summary(callback, state)

@router.callback_query(F.data == "change_address")
async def change_address(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìç –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:")
    await show_profile_card(callback.message, callback.from_user.id)


async def confirm_order_summary(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id

    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)
    items = get_cart_items(db, user_id)

    if not items:
        await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_back_to_menu_kb())
        await state.clear()
        return

    text = "üì¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
    text += f"üë§ –§–ò–û: {profile.user_name}\n"
    text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {profile.user_phone}\n"
    if data['delivery'] == "–ö—É—Ä—å–µ—Ä–æ–º":
        text += f"üè† –ê–¥—Ä–µ—Å: {profile.user_address}\n"
    text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n\n"
    text += "üõí <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"

    total = 0.0
    for item in items:
        subtotal = item.product.price * item.quantity
        total += subtotal
        text += f"‚ñ™Ô∏è {item.product.name} √ó {item.quantity} = {subtotal:.0f}‚ÇΩ\n"

    text += f"\nüí≥ <b>–ò—Ç–æ–≥–æ: {total:.0f}‚ÇΩ</b>"

    await callback.message.edit_text(text, reply_markup=get_confirm_order_kb(), parse_mode="HTML")
    await state.update_data(total=total)
    await state.set_state(NewOrderForm.confirm_order)


@router.callback_query(NewOrderForm.confirm_order, F.data == "confirm_new_order")
async def confirm_new_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id

    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)
    items = get_cart_items(db, user_id)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞
    items_data = [
        {
            'product_id': item.product.id,
            'quantity': item.quantity,
            'price': item.product.price
        }
        for item in items
    ]

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    order = create_order(
        db=db,
        user_id=user_id,
        total_amount=data['total'],
        customer_name=profile.user_name,
        customer_phone=profile.user_phone,
        customer_address=profile.user_address,
        delivery_method=data['delivery'],
        items_data=items_data
    )

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ ‚Ññ {order.order_number}")
    order = db.query(Order).filter(Order.order_number == order.order_number).first()
    order_id = order.id
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    clear_cart(db, user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message = f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.order_number}\n"

    for admin_id in ADMIN_IDS:
        try:
            await callback.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_order_{order_id}")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await callback.message.edit_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"üìÑ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order.order_number}</b>\n"
        f"üí≥ –°—É–º–º–∞: {data['total']:.0f}‚ÇΩ\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        reply_markup=get_back_to_menu_kb(),
        parse_mode="HTML"
    )

    await state.clear()