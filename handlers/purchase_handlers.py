from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from config import ADMIN_IDS
from handlers.lk_handlers import show_profile_card
from keyboards.lk_keyboards import get_profile_edit_kb, get_confirm_order_kb, get_confirm_data_kb
from states.order_states import OrderForm, NewOrderForm
from database.crud import get_cart_items, create_order, clear_cart, get_user_profile
from database.db_helper import get_db
from handlers.order_handlers import show_cart
from keyboards.inline_keyboards import get_delivery_kb, get_confirm_kb, get_back_to_menu_kb, get_confirm_address_kb
import re
import logging

logger = logging.getLogger(__name__)

router = Router()


# async def confirm_new_order(message, state: FSMContext):
#     data = await state.get_data()
#     user_id = message.from_user.id
#
#     db_gen = get_db()
#     db = next(db_gen)
#     items = get_cart_items(db, user_id)
#
#     if not items:
#         await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_back_to_menu_kb())
#         await state.clear()
#         return
#
#     text = "üì¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
#     text += f"üë§ –§–ò–û: {data['name']}\n"
#     text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
#     if data.get('address'):
#         text += f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
#     text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n\n"
#     text += "üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
#
#     total = 0.0
#     for item in items:
#         subtotal = item.product.price * item.quantity
#         total += subtotal
#         text += f"‚ñ™Ô∏è {item.product.name} √ó {item.quantity} = {subtotal:.0f}‚ÇΩ\n"
#
#     text += f"\nüí≥ <b>–ò—Ç–æ–≥–æ: {total:.0f}‚ÇΩ</b>"
#
#     await message.edit_text(text, reply_markup=get_confirm_kb(), parse_mode="HTML")
#     await state.update_data(total=total)
#     await state.set_state(NewOrderForm.confirm)
#
# @router.callback_query(F.data == "start_new_order")
# async def start_new_order(callback: CallbackQuery, state: FSMContext):
#     user_id = callback.from_user.id
#
#     db_gen = get_db()
#     db = next(db_gen)
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
#     profile = get_user_profile(db, user_id)
#
#     if profile:
#         # –ï—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
#         await state.update_data(
#             name=profile.user_name,
#             phone=profile.user_phone,
#             address=profile.user_address
#         )
#
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏
#         await callback.message.delete()
#         await callback.message.answer("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_delivery_kb())
#         await state.set_state(NewOrderForm.delivery)
#     else:
#         # –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å—ë
#         await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
#         await state.set_state(OrderForm.name)  # –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞
#
# @router.callback_query(F.data == "start_order")
# async def start_order(callback: CallbackQuery, state: FSMContext):
#     await callback.answer()
#
#     try:
#         await callback.message.delete()
#     except:
#         pass
#
#     await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
#     await state.set_state(OrderForm.name)
#
# @router.message(OrderForm.name)
# async def process_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...:")
#     await state.set_state(OrderForm.phone)
#
# @router.message(OrderForm.phone)
# async def process_phone(message: Message, state: FSMContext):
#     phone = message.text.strip()
#     if phone[0] == "8" and len(phone) == 11:
#         phone = "+7" + phone[1:]
#
#     if phone[:2] == "+7":
#
#         if re.match(r'^\d{10}$', phone[2:]):
#             await state.update_data(phone=phone)
#             await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
#             await state.set_state(OrderForm.address)
#     else:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\nüì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX")
#
# @router.message(OrderForm.address)
# async def process_address(message: Message, state: FSMContext):
#     await state.update_data(address=message.text)
#     await message.answer("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_delivery_kb())
#     await state.set_state(OrderForm.delivery)
#
#
# @router.callback_query(NewOrderForm.delivery)
# async def process_delivery_new(callback: CallbackQuery, state: FSMContext):
#     delivery_map = {
#         "delivery_courier": "–ö—É—Ä—å–µ—Ä–æ–º",
#         "delivery_pickup": "–°–∞–º–æ–≤—ã–≤–æ–∑",
#         "delivery_sdek": "–°–î–≠–ö"
#     }
#     delivery_method = delivery_map.get(callback.data, "–ù–µ —É–∫–∞–∑–∞–Ω")
#     await state.update_data(delivery=delivery_method)
#
#     data = await state.get_data()
#
#     if delivery_method == "–ö—É—Ä—å–µ—Ä–æ–º":
#         # –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥—Ä–µ—Å
#         if data.get('address'):
#             # –ê–¥—Ä–µ—Å –µ—Å—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
#             await callback.message.edit_text(
#                 f"üìç –í–∞—à –∞–¥—Ä–µ—Å: {data['address']}\n"
#                 f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?",
#                 reply_markup=get_confirm_address_kb()
#             )
#         else:
#             # –ê–¥—Ä–µ—Å–∞ –Ω–µ—Ç ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
#             await callback.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
#             await state.set_state(NewOrderForm.address)
#     else:
#         # –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–¥—Ä–µ—Å–∞ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
#         await confirm_new_order(callback, state)
#
# @router.callback_query(F.data == "change_address")
# async def change_address(callback: CallbackQuery, state: FSMContext):
#     await callback.message.edit_text("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
#     await state.set_state(NewOrderForm.address)
#
#
# @router.callback_query(F.data == "use_address")
# async def confirm_address(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#
#     # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
#     await confirm_new_order(callback, state)
#
#
#
# @router.message(NewOrderForm.address)
# async def process_address_new(message: Message, state: FSMContext):
#     await state.update_data(address=message.text)
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª—å
#     data = await state.get_data()
#     user_id = message.from_user.id
#
#     db_gen = get_db()
#     db = next(db_gen)
#     profile = get_user_profile(db, user_id)
#
#     if profile:
#         profile.user_address = message.text
#         db.commit()
#
#     await confirm_new_order(message, state)
#
# @router.callback_query(OrderForm.delivery)
# async def process_delivery(callback: CallbackQuery, state: FSMContext):
#     delivery_map = {
#         "delivery_courier": "–ö—É—Ä—å–µ—Ä–æ–º",
#         "delivery_pickup": "–°–∞–º–æ–≤—ã–≤–æ–∑",
#         "delivery_sdek": "–°–î–≠–ö"
#     }
#     delivery_method = delivery_map.get(callback.data, "–ù–µ —É–∫–∞–∑–∞–Ω")
#     await state.update_data(delivery=delivery_method)
#
#     # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
#     data = await state.get_data()
#     user_id = callback.from_user.id
#
#     db_gen = get_db()
#     db = next(db_gen)
#     items = get_cart_items(db, user_id)
#
#     if not items:
#         await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_back_to_menu_kb())
#         await state.clear()
#         return
#
#     text = "üì¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
#     text += f"üë§ –§–ò–û: {data['name']}\n"
#     text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
#     text += f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
#     text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_method}\n\n"
#     text += "üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
#
#     total = 0.0
#     for item in items:
#         subtotal = item.product.price * item.quantity
#         total += subtotal
#         text += f"‚ñ™Ô∏è {item.product.name} √ó {item.quantity} = {subtotal:.0f}‚ÇΩ\n"
#
#     text += f"\nüí≥ <b>–ò—Ç–æ–≥–æ: {total:.0f}‚ÇΩ</b>"
#
#     # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –¢–û–í–ê–†–û–í, –ê –ù–ï –¢–û–õ–¨–ö–û ID
#     items_data = [
#         {
#             'product_id': item.product.id,
#             'quantity': item.quantity,
#             'price': item.product.price
#         }
#         for item in items
#     ]
#
#     await state.update_data(total=total, items=items_data)
#     await callback.message.edit_text(text, reply_markup=get_confirm_kb(), parse_mode="HTML")
#     await state.set_state(OrderForm.confirm)
#
#
# @router.callback_query(OrderForm.confirm, F.data == "confirm_order")
# async def confirm_order(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     user_id = callback.from_user.id
#
#     db_gen = get_db()
#     db = next(db_gen)
#     items_data = data.get('items', [])
#     # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
#     order = create_order(
#         db=db,
#         user_id=user_id,
#         total_amount=data['total'],
#         customer_name=data['name'],
#         customer_phone=data['phone'],
#         customer_address=data['address'],
#         delivery_method=data['delivery'],
#         items_data=items_data
#     )
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ ‚Ññ {order.order_number}")
#     # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
#     clear_cart(db, user_id)
#
#     await callback.message.edit_text(
#         f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
#         f"üìÑ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order.order_number}</b>\n"
#         f"üí≥ –°—É–º–º–∞: {data['total']:.0f}‚ÇΩ\n"
#         f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n\n"
#         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
#         reply_markup=get_back_to_menu_kb(),
#         parse_mode="HTML"
#     )
#
#     await state.clear()
#
#
# @router.callback_query(OrderForm.confirm, F.data == "cancel_order")
# async def cancel_order(callback: CallbackQuery, state: FSMContext):
#     await state.clear()
#     await callback.message.edit_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_back_to_menu_kb())
#
# @router.callback_query(F.data == "back_to_cart")
# async def back_to_cart(callback: CallbackQuery):
#     await show_cart(callback)

@router.callback_query(F.data == "start_new_order")
async def start_new_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    db_gen = get_db()
    db = next(db_gen)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    profile = get_user_profile(db, user_id)

    if profile:
        # –ï—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        text = f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        text += f"–§–ò–û: {profile.user_name}\n"
        text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.user_phone}\n"
        text += f"–ê–¥—Ä–µ—Å: {profile.user_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö."

        if callback.message.text:
            await callback.message.edit_text(text, reply_markup=get_confirm_data_kb(), parse_mode="HTML")
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=get_confirm_data_kb(), parse_mode="HTML")
    else:
        # –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        await callback.message.edit_text(
            "‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_profile")]
            ])
        )





@router.callback_query(F.data == "confirm_data")
async def confirm_data(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
    await callback.message.edit_text("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_delivery_kb())
    await state.set_state(NewOrderForm.delivery)


@router.callback_query(F.data == "edit_data")
async def edit_data(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    await callback.message.edit_text("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:",
                                     reply_markup=get_profile_edit_kb(callback.from_user.id))


@router.callback_query(NewOrderForm.delivery)
async def process_delivery_new(callback: CallbackQuery, state: FSMContext):
    delivery_map = {
        "delivery_courier": "–ö—É—Ä—å–µ—Ä–æ–º",
        "delivery_pickup": "–°–∞–º–æ–≤—ã–≤–æ–∑",
        "delivery_sdek": "–°–î–≠–ö"
    }
    delivery_method = delivery_map.get(callback.data, "–ù–µ —É–∫–∞–∑–∞–Ω")
    await state.update_data(delivery=delivery_method)

    user_id = callback.from_user.id
    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)

    if delivery_method == "–ö—É—Ä—å–µ—Ä–æ–º":
        # –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥—Ä–µ—Å
        if profile.user_address:
            # –ê–¥—Ä–µ—Å –µ—Å—Ç—å ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
            await callback.message.edit_text(
                f"üìç –í–∞—à –∞–¥—Ä–µ—Å: {profile.user_address}\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?",
                reply_markup=get_confirm_address_kb()
            )
            await state.set_state(NewOrderForm.confirm_address)
        else:
            # –ê–¥—Ä–µ—Å–∞ –Ω–µ—Ç ‚Üí –ø—Ä–æ—Å–∏–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            await callback.message.edit_text("üìç –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:")
            await show_profile_card(callback.message, user_id)
    else:
        # –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–¥—Ä–µ—Å–∞ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
        await confirm_order_summary(callback, state)

@router.callback_query(F.data == "use_address")
async def confirm_address(callback: CallbackQuery, state: FSMContext):
    await confirm_order_summary(callback, state)

@router.callback_query(F.data == "change_address")
async def change_address(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìç –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:")
    await show_profile_card(callback.message, callback.from_user.id)


async def confirm_order_summary(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id

    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)
    items = get_cart_items(db, user_id)

    if not items:
        await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_back_to_menu_kb())
        await state.clear()
        return

    text = "üì¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
    text += f"üë§ –§–ò–û: {profile.user_name}\n"
    text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {profile.user_phone}\n"
    if profile.user_address:
        text += f"üìç –ê–¥—Ä–µ—Å: {profile.user_address}\n"
    text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n\n"
    text += "üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n"

    total = 0.0
    for item in items:
        subtotal = item.product.price * item.quantity
        total += subtotal
        text += f"‚ñ™Ô∏è {item.product.name} √ó {item.quantity} = {subtotal:.0f}‚ÇΩ\n"

    text += f"\nüí≥ <b>–ò—Ç–æ–≥–æ: {total:.0f}‚ÇΩ</b>"

    await callback.message.edit_text(text, reply_markup=get_confirm_order_kb(), parse_mode="HTML")
    await state.update_data(total=total)
    await state.set_state(NewOrderForm.confirm_order)


@router.callback_query(NewOrderForm.confirm_order, F.data == "confirm_new_order")
async def confirm_new_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id

    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)
    items = get_cart_items(db, user_id)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞
    items_data = [
        {
            'product_id': item.product.id,
            'quantity': item.quantity,
            'price': item.product.price
        }
        for item in items
    ]

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    order = create_order(
        db=db,
        user_id=user_id,
        total_amount=data['total'],
        customer_name=profile.user_name,
        customer_phone=profile.user_phone,
        customer_address=profile.user_address,
        delivery_method=data['delivery'],
        items_data=items_data
    )

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ ‚Ññ {order.order_number}")

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    clear_cart(db, user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message = f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.order_number}\n"

    for admin_id in ADMIN_IDS:
        try:
            await callback.bot.send_message(admin_id, admin_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await callback.message.edit_text(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"üìÑ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <b>{order.order_number}</b>\n"
        f"üí≥ –°—É–º–º–∞: {data['total']:.0f}‚ÇΩ\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery']}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        reply_markup=get_back_to_menu_kb(),
        parse_mode="HTML"
    )

    await state.clear()