from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
import re
from states.user_states import UserProfile
from database import models
from database.crud import get_user_profile, get_orders_by_user, user_cancel_order
from database.db_helper import get_db

from keyboards.lk_keyboards import get_profile_edit_kb, return_profile_edit_kb, share_contact, get_user_orders_kb, \
    order_details_kb, kb_with_cancel

router = Router()


def normalize_phone(phone: str) -> str | None:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É +7.........., –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', phone)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    if len(digits) == 11 and digits.startswith('8'):
        # –ó–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ +7
        return f"+7{digits[1:]}"
    elif len(digits) == 11 and digits.startswith('7'):
        # –î–æ–±–∞–≤–ª—è–µ–º +
        return f"+{digits}"
    elif len(digits) == 10:
        # –î–æ–±–∞–≤–ª—è–µ–º +7
        return f"+7{digits}"
    elif len(digits) == 12 and digits.startswith('7'):
        # –£–∂–µ +7
        return f"+{digits[1:]}"
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None


async def show_profile_card(message, user_id=None):
    if user_id is None:
        user_id = message.from_user.id

    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)

    if not profile:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f'üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n'
    text += f'üë§ –§–ò–û: {profile.user_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
    text += f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {profile.user_phone or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
    text += f'üè† –ê–¥—Ä–µ—Å: {profile.user_address or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}'


    try:
        await message.edit_text(text, reply_markup=get_profile_edit_kb(user_id))
    except:
        await message.answer(text, reply_markup=get_profile_edit_kb(user_id))

@router.callback_query(F.data == "user_profile")
async def user_profile(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = callback.from_user.id
    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)

    if not profile:
        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        new_profile = models.Profile(
            user_id=user_id,
            user_name=None,
            user_phone=None,
            user_address=None
        )
        db.add(new_profile)
        db.commit()
        profile = new_profile

    text = f'üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n'
    text += f'üë§ –§–ò–û: {profile.user_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
    text += f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {profile.user_phone or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
    text += f'üè† –ê–¥—Ä–µ—Å: {profile.user_address or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}'

    await callback.message.edit_text(text, reply_markup=get_profile_edit_kb(user_id))

#=============== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û ==========================

@router.callback_query(F.data.startswith("edit_username_"))
async def start_edit_username(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_user_id=user_id, field="name")
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=return_profile_edit_kb())
    await state.set_state(UserProfile.name)

@router.message(UserProfile.name)
async def process_edit_username(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['editing_user_id']

    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)

    if profile:
        profile.user_name = message.text
        db.commit()
        await message.answer("‚úÖ –§–ò–û –ò–∑–º–µ–Ω–µ–Ω–æ!", show_alert=True)
        await show_profile_card(message, user_id)
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()

#=============== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–¥—Ä–µ—Å–∞ ==========================

@router.callback_query(F.data.startswith("edit_user_address_"))
async def start_edit_user_address(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_user_id=user_id, field="address")
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=return_profile_edit_kb())
    await state.set_state(UserProfile.address)

@router.message(UserProfile.address)
async def process_edit_user_address(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['editing_user_id']

    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)

    if profile:
        profile.user_address = message.text
        db.commit()
        await message.answer("‚úÖ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω!", show_alert=True)
        await show_profile_card(message, user_id)
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()

#=============== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–µ–ª–µ—Ñ–æ–Ω–∞ =========================
@router.callback_query(F.data.startswith("edit_user_phone_"))
async def start_edit_user_phone(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await state.update_data(editing_user_id=user_id, field="phone")

    await callback.message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä':",
        reply_markup=share_contact()
    )
    await state.set_state(UserProfile.phone)

@router.message(UserProfile.phone, F.contact)
async def process_edit_user_phone_contact(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['editing_user_id']

    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)

    raw_phone = message.contact.phone_number
    normalized_phone = normalize_phone(raw_phone)

    if normalized_phone is None:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: {raw_phone}\n"
            f"üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑."
        )
        return

    if profile:
        profile.user_phone = normalized_phone
        db.commit()

        await message.answer(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: {normalized_phone}", reply_markup=ReplyKeyboardRemove())
        await show_profile_card(message, user_id)
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardRemove())

    await state.clear()

@router.message(UserProfile.phone)
async def process_edit_user_phone_text(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['editing_user_id']

    db_gen = get_db()
    db = next(db_gen)
    profile = get_user_profile(db, user_id)
    raw_phone = message.text
    normalized_phone = normalize_phone(raw_phone)

    if normalized_phone is None:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: {raw_phone}\n"
            f"üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑."
        )
        return

    if profile:
        profile.user_phone = normalized_phone
        db.commit()

        await message.answer(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: {normalized_phone}", reply_markup=ReplyKeyboardRemove())
        await show_profile_card(message, user_id)
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardRemove())

    await state.clear()

@router.message(F.contact)
async def handle_unexpected_contact(message: Message):
    await message.answer(
        "üìû –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏—ë–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.\n"
        "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
    )

@router.callback_query(F.data.startswith("orders_"))
async def show_user_orders(callback: CallbackQuery):
    db_gen = get_db()
    db = next(db_gen)
    user_id = int(callback.data.split("_")[-1])
    orders = get_orders_by_user(db, user_id)

    if not orders:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=return_profile_edit_kb())
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"


    await callback.message.edit_text(text, reply_markup=get_user_orders_kb(orders, user_id), parse_mode="HTML")




@router.callback_query(F.data.startswith("user_order_"))
async def show_user_order_details(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])

    db_gen = get_db()
    db = next(db_gen)
    order = db.query(models.Order).filter(models.Order.id == order_id).first()
    user_id = order.user_id

    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f"üìÑ <b>–ó–∞–∫–∞–∑ ‚Ññ {order.order_number}</b>\n\n"
    text += f"üë§ –§–ò–û: {order.customer_name}\n"
    text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}\n"
    text += f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.customer_address}\n"
    text += f"üí∞ –°—É–º–º–∞: {order.total_amount}‚ÇΩ\n"
    text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_method}\n"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {order.status}\n"
    text += f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    if order.items:
        text += f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
        for item in order.items:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            text += f"‚Ä¢ {item.product.name} - {item.quantity}x{item.price} = {item.quantity * item.price}\n"
    else:
        text += f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ: –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"

    if order.status == "new":
        await callback.message.edit_text(text, reply_markup=kb_with_cancel(order_id, user_id), parse_mode="HTML")
    else:
        await callback.message.edit_text(text, reply_markup=order_details_kb(order_id, user_id), parse_mode="HTML")


@router.callback_query(F.data.startswith("cancelling_"))
async def cancelling_order(callback: CallbackQuery):
    data = callback.data.split("_")
    order_id = int(data[-1])

    db_gen = get_db()
    db = next(db_gen)
    order = db.query(models.Order).filter(models.Order.id == order_id).first()

    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    status = order.status
    user_id = order.user_id
    updated_order = user_cancel_order(db, order_id, status)

    if updated_order:
        await callback.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")

        try:
            await callback.message.delete()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        text = f"üìÑ <b>–ó–∞–∫–∞–∑ ‚Ññ {updated_order.order_number}</b>\n\n"
        text += f"üë§ –§–ò–û: {updated_order.customer_name}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {updated_order.customer_phone}\n"
        text += f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {updated_order.customer_address}\n"
        text += f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑: {updated_order.total_amount}‚ÇΩ\n"
        text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {updated_order.delivery_method}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {updated_order.status}\n"
        text += f"üìÖ –î–∞—Ç–∞: {updated_order.created_at.strftime('%d.%m.%Y %H:%M')}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        if updated_order.items:
            text += f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
            for item in updated_order.items:
                text += f"‚Ä¢ {item.product.name} - {item.quantity}x{item.price} = {item.quantity * item.price}\n"
        else:
            text += f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ: –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"

        await callback.message.answer(text, reply_markup=order_details_kb(order_id, user_id), parse_mode="HTML")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")